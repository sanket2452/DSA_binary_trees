/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void noOfNodes(map<TreeNode*, TreeNode*> &mpp, TreeNode* target, int k, vector<int> &ans){
        map<TreeNode*, int> vis;
        queue<TreeNode*> q;
        q.push(target);
        vis[target]=1;
        int cnt=0;
        while(!q.empty()){
            int sz=q.size();
            int flag=0;
            for(int i=0;i<sz;i++){
                auto node=q.front();
                if(cnt==k) ans.push_back(node->val);
                q.pop();
                if(node->left && !vis[node->left]){
                    flag=1;
                    q.push(node->left);
                    vis[node->left]=1;
                }
                if(node->right && !vis[node->right]){
                    flag=1;
                    q.push(node->right);
                    vis[node->right]=1;
                }
                if(mpp[node] && !vis[mpp[node]]){
                    flag=1;
                    q.push(mpp[node]);
                    vis[mpp[node]]=1;
                }
                
            }
            if(flag) cnt++;
            
            
        }
    }
    void bfsToMap(map<TreeNode*, TreeNode*> &mpp, TreeNode* root){
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node=q.front();
            q.pop();
            if(node->left){ 
                mpp[node->left]=node;
                q.push(node->left);
            }
            if(node->right){ 
                mpp[node->right]=node;
                q.push(node->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        map<TreeNode*, TreeNode*> mpp;
        bfsToMap(mpp, root);
        vector<int> ans;
        noOfNodes(mpp, target, k, ans);
        return ans;
    }
};
